{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","onAddedComment","useEffect","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","text","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","params","useParams","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.e64739c7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useRef } from \"react\";\n\nimport classes from \"./NewCommentForm.module.css\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport { useEffect } from \"react\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n    sendRequest(\n      {\n        commentData: enteredText,\n        quoteId: props.quoteId\n      }\n    );\n  };\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  return (\n    \n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.comment} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = (props) => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const {\n    sendRequest,\n    status,\n    data: loadedComments,\n  } = useHttp(getAllComments);\n  const { quoteId } = props;\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId)\n  },[sendRequest,quoteId]);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length === 0) {\n    comments = <p className=\"centered\">No comments added.</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Link, Route, useParams, useRouteMatch } from \"react-router-dom\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport useHttp from '../hooks/use-http';\nimport { getSingleQuote } from \"../lib/api\";\nimport { useEffect } from 'react';\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\n\nconst QuoteDetail = () => {\n  const params = useParams();\n  const match = useRouteMatch()\n  const {\n    quoteId\n  } = params\n\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error\n  }=useHttp(getSingleQuote, true)\n\n  useEffect(()=>{\n    sendRequest(quoteId)\n  },[sendRequest,quoteId])\n\n  if(status === 'pending'){\n    return <div className=\"centered\">\n      <LoadingSpinner/>\n    </div>\n  }\n\n  if(error){\n    return <div className=\"centered\">\n      {error}\n    </div>\n  }\n\n  if (!loadedQuote.text) {\n    return <p>No quote found</p>;\n  }\n\n  return (\n    <>\n      <h1>QuoteDetail page</h1>\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      <Route path={match.path} exact>\n        <div className=\"centered\">\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\n            Load comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.url}/comments`}>\n        <Comments quoteId={quoteId}/>\n      </Route>\n    </>\n  );\n};\n\nexport default QuoteDetail;\n"],"sourceRoot":""}